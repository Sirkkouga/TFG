 private static String re@@ al@@ C@@ an@@ on@@ ic@@ ali@@ ze ( final String path , final int l@@ ast@@ D@@ o@@ t , final int in@@ i@@ ti@@ al@@ St@@ ate ) { int state = in@@ i@@ ti@@ al@@ St@@ ate ; int e@@ at@@ Co@@ unt = 0 ; int to@@ k@@ en@@ En@@ d = path . length ( ) ; final List < String > par@@ ts = new ArrayList < > ( ) ; for ( int i = l@@ ast@@ D@@ o@@ t - 1 ; i >@@ = 0 ; -@@ - i ) { final ch@@ a@@ r c = path . ch@@ ar@@ A@@ t ( i ) ; s@@ w@@ it@@ ch ( state ) { c@@ ase N@@ O@@ R@@ M@@ A@@ L : { if ( c == ' / ' ) { state = F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H ; if ( e@@ at@@ Co@@ unt > 0 ) { -@@ - e@@ at@@ Co@@ unt ; to@@ k@@ en@@ En@@ d = i ; } } b@@ rea@@ k ; } c@@ ase F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H : { if ( c == ' . ' ) { state = ON@@ E_@@ D@@ O@@ T ; } else if ( c == ' / ' ) { if ( e@@ at@@ Co@@ unt > 0 ) { -@@ - e@@ at@@ Co@@ unt ; to@@ k@@ en@@ En@@ d = i ; } else { par@@ ts . add ( path . substring ( i + 1 , to@@ k@@ en@@ En@@ d ) ) ; to@@ k@@ en@@ En@@ d = i ; } } else { state = N@@ O@@ R@@ M@@ A@@ L ; } b@@ rea@@ k ; } c@@ ase ON@@ E_@@ D@@ O@@ T : { if ( c == ' . ' ) { state = T@@ W@@ O@@ _@@ D@@ O@@ T ; } else if ( c == ' / ' ) { if ( i + 2 != to@@ k@@ en@@ En@@ d ) { par@@ ts . add ( path . substring ( i + 2 , to@@ k@@ en@@ En@@ d ) ) ; } to@@ k@@ en@@ En@@ d = i ; state = F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H ; } else { state = N@@ O@@ R@@ M@@ A@@ L ; } b@@ rea@@ k ; } c@@ ase T@@ W@@ O@@ _@@ D@@ O@@ T : { if ( c == ' / ' ) { if ( i + 3 != to@@ k@@ en@@ En@@ d ) { par@@ ts . add ( path . substring ( i + 3 , to@@ k@@ en@@ En@@ d ) ) ; } to@@ k@@ en@@ En@@ d = i ; e@@ at@@ Co@@ unt ++ ; state = F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H ; } else { state = N@@ O@@ R@@ M@@ A@@ L ; } } } } final S@@ tr@@ ing@@ Builder result = new S@@ tr@@ ing@@ Builder ( ) ; if ( to@@ k@@ en@@ En@@ d != 0 ) { result . ap@@ pen@@ d ( path . substring ( 0 , to@@ k@@ en@@ En@@ d ) ) ; } for ( int i = par@@ ts . size ( ) - 1 ; i >@@ = 0 ; -@@ - i ) { result . ap@@ pen@@ d ( par@@ ts . get ( i ) ) ; } if ( result . length ( ) == 0 ) { return " / " ; } return result . to@@ String ( ) ; }
 static void P@@ r@@ int@@ H@@ el@@ p ( ) { Sy@@ s@@ tem . o@@ u@@ t . p@@ r@@ int@@ l@@ n ( " \n U@@ sag@@ e : ▁ ▁ L@@ Z@@ M@@ A ▁ < e | d > ▁ [ < s@@ w@@ it@@ ch@@ es > . . . ] ▁ in@@ put@@ File ▁ out@@ put@@ File \n " + " ▁ ▁ e : ▁ en@@ co@@ de ▁ fil@@ e \n " + " ▁ ▁ d : ▁ de@@ co@@ de ▁ fil@@ e \n " + " ▁ ▁ b : ▁ B@@ en@@ ch@@ mar@@ k \n " + " < S@@ w@@ it@@ ch@@ es > \n " + " ▁ ▁ - d { N } : ▁ ▁ set ▁ d@@ ic@@ tion@@ ar@@ y ▁ - ▁ [ 0@@ ,@@ 2@@ 8 ] , ▁ de@@ fa@@ ult : ▁ 2@@ 3 ▁ ( 8@@ M@@ B ) \n " + " ▁ ▁ - f@@ b { N } : ▁ set ▁ n@@ um@@ b@@ er ▁ of ▁ f@@ as@@ t ▁ b@@ y@@ te@@ s ▁ - ▁ [ 5 , ▁ 2@@ 7@@ 3 ] , ▁ de@@ fa@@ ult : ▁ 1@@ 2@@ 8 \n " + " ▁ ▁ - l@@ c { N } : ▁ set ▁ n@@ um@@ b@@ er ▁ of ▁ li@@ ter@@ al ▁ context ▁ b@@ it@@ s ▁ - ▁ [ 0 , ▁ 8 ] , ▁ de@@ fa@@ ult : ▁ 3 \n " + " ▁ ▁ - l@@ p { N } : ▁ set ▁ n@@ um@@ b@@ er ▁ of ▁ li@@ ter@@ al ▁ p@@ os ▁ b@@ it@@ s ▁ - ▁ [ 0 , ▁ 4 ] , ▁ de@@ fa@@ ult : ▁ 0 \n " + " ▁ ▁ - p@@ b { N } : ▁ set ▁ n@@ um@@ b@@ er ▁ of ▁ p@@ os ▁ b@@ it@@ s ▁ - ▁ [ 0 , ▁ 4 ] , ▁ de@@ fa@@ ult : ▁ 2 \n " + " ▁ ▁ - m@@ f { M@@ F _ ID } : ▁ set ▁ M@@ atch ▁ F@@ in@@ der : ▁ [ b@@ t@@ 2 , ▁ b@@ t@@ 4 ] , ▁ de@@ fa@@ ult : ▁ b@@ t@@ 4 \n " + " ▁ ▁ - e@@ os : ▁ ▁ ▁ wri@@ te ▁ En@@ d ▁ O@@ f ▁ Stream ▁ mar@@ k@@ er \n " ) ; }
 public static b@@ y@@ te [ ] con@@ ver@@ t@@ Ob@@ jec@@ t@@ T@@ o@@ J@@ son@@ By@@ te@@ s ( Object ob@@ ject ) throws IOException { Ob@@ jec@@ t@@ M@@ ap@@ p@@ er ma@@ p@@ p@@ er = new Ob@@ jec@@ t@@ M@@ ap@@ p@@ er ( ) ; ma@@ p@@ p@@ er . set@@ S@@ eri@@ ali@@ z@@ ati@@ on@@ In@@ clu@@ sion ( J@@ son@@ In@@ clu@@ de . In@@ clu@@ de . N@@ ON@@ _@@ N@@ U@@ L@@ L ) ; J@@ o@@ d@@ a@@ Mo@@ d@@ ul@@ e m@@ o@@ d@@ ul@@ e = new J@@ o@@ d@@ a@@ Mo@@ d@@ ul@@ e ( ) ; D@@ ate@@ Tim@@ e@@ F@@ orm@@ at@@ ter@@ F@@ actory form@@ at@@ ter@@ F@@ actory = new D@@ ate@@ Tim@@ e@@ F@@ orm@@ at@@ ter@@ F@@ actory ( ) ; form@@ at@@ ter@@ F@@ actory . set@@ I@@ s@@ o ( D@@ ate@@ Tim@@ e@@ F@@ or@@ ma@@ t . I@@ S@@ O . D@@ A@@ T@@ E ) ; m@@ o@@ d@@ ul@@ e . add@@ S@@ eri@@ ali@@ z@@ er ( D@@ ate@@ Tim@@ e . cl@@ ass , new D@@ ate@@ Tim@@ e@@ S@@ eri@@ ali@@ z@@ er ( new J@@ ack@@ son@@ J@@ o@@ d@@ a@@ F@@ or@@ ma@@ t ( form@@ at@@ ter@@ F@@ actory . c@@ rea@@ te@@ D@@ ate@@ Tim@@ e@@ F@@ orm@@ at@@ ter ( ) . w@@ i@@ th@@ Z@@ on@@ e@@ U@@ T@@ C ( ) ) ) ) ; ma@@ p@@ p@@ er . re@@ g@@ is@@ ter@@ Mo@@ d@@ ul@@ e ( m@@ o@@ d@@ ul@@ e ) ; return ma@@ p@@ p@@ er . wri@@ te@@ V@@ alu@@ e@@ A@@ s@@ By@@ te@@ s ( ob@@ ject ) ; }
 @ Test public static void m@@ e@@ g@@ am@@ or@@ p@@ h@@ ic@@ V@@ ar@@ Test ( ) throws Script@@ Exception , In@@ ter@@ r@@ up@@ te@@ d@@ Exception { final N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory f@@ actory = new N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory ( ) ; final Script@@ En@@ gin@@ e e = f@@ actory . get@@ Script@@ En@@ gin@@ e ( ) ; final Script@@ Context [ ] con@@ te@@ x@@ ts = new Script@@ Context [ N@@ U@@ M@@ B@@ ER@@ _@@ O@@ F@@ _@@ C@@ ON@@ T@@ E@@ X@@ T@@ S ] ; final String shared@@ Script = " foo " ; for ( int i = 0 ; i < N@@ U@@ M@@ B@@ ER@@ _@@ O@@ F@@ _@@ C@@ ON@@ T@@ E@@ X@@ T@@ S ; i ++ ) { final Script@@ Context context = con@@ te@@ x@@ ts [ i ] = new Si@@ mp@@ le@@ Script@@ Context ( ) ; final B@@ in@@ d@@ ings b = e . c@@ rea@@ te@@ B@@ in@@ d@@ ings ( ) ; context . set@@ B@@ in@@ d@@ ings ( b , Script@@ Context . E@@ N@@ G@@ IN@@ E_@@ S@@ C@@ O@@ P@@ E ) ; assertEquals ( e . eval ( " v@@ a@@ r ▁ foo ▁ = ▁ ' " + i + " ' ; " , context ) , null ) ; } for ( int i = 0 ; i < N@@ U@@ M@@ B@@ ER@@ _@@ O@@ F@@ _@@ C@@ ON@@ T@@ E@@ X@@ T@@ S ; i ++ ) { final Script@@ Context context = con@@ te@@ x@@ ts [ i ] ; assertEquals ( e . eval ( shared@@ Script , context ) , String . v@@ alu@@ e@@ O@@ f ( i ) ) ; } }
 public static Th@@ ro@@ w@@ able get@@ R@@ oo@@ t@@ C@@ a@@ u@@ se ( Th@@ ro@@ w@@ able thro@@ w@@ able ) { if ( thro@@ w@@ able . get@@ C@@ a@@ u@@ se ( ) != null ) return get@@ R@@ oo@@ t@@ C@@ a@@ u@@ se ( thro@@ w@@ able . get@@ C@@ a@@ u@@ se ( ) ) ; return thro@@ w@@ able ; }
 public static String c@@ an@@ on@@ ic@@ ali@@ ze ( final String path ) { int state = S@@ T@@ A@@ R@@ T ; for ( int i = path . length ( ) - 1 ; i >@@ = 0 ; -@@ - i ) { final ch@@ a@@ r c = path . ch@@ ar@@ A@@ t ( i ) ; s@@ w@@ it@@ ch ( c ) { c@@ ase ' / ' : if ( state == F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H ) { return re@@ al@@ C@@ an@@ on@@ ic@@ ali@@ ze ( path , i + 1 , F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H ) ; } else if ( state == ON@@ E_@@ D@@ O@@ T ) { return re@@ al@@ C@@ an@@ on@@ ic@@ ali@@ ze ( path , i + 2 , F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H ) ; } else if ( state == T@@ W@@ O@@ _@@ D@@ O@@ T ) { return re@@ al@@ C@@ an@@ on@@ ic@@ ali@@ ze ( path , i + 3 , F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H ) ; } state = F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H ; b@@ rea@@ k ; c@@ ase ' . ' : if ( state == F@@ I@@ R@@ S@@ T@@ _@@ S@@ L@@ A@@ S@@ H || state == S@@ T@@ A@@ R@@ T ) { state = ON@@ E_@@ D@@ O@@ T ; } else if ( state == ON@@ E_@@ D@@ O@@ T ) { state = T@@ W@@ O@@ _@@ D@@ O@@ T ; } else { state = N@@ O@@ R@@ M@@ A@@ L ; } b@@ rea@@ k ; de@@ fa@@ ult : state = N@@ O@@ R@@ M@@ A@@ L ; b@@ rea@@ k ; } } return path ; }
 @ Test public static void m@@ e@@ g@@ am@@ or@@ p@@ h@@ ic@@ In@@ h@@ eri@@ te@@ d@@ G@@ l@@ ob@@ al@@ L@@ et@@ Test ( ) throws Script@@ Exception , In@@ ter@@ r@@ up@@ te@@ d@@ Exception { final N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory f@@ actory = new N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory ( ) ; final Script@@ En@@ gin@@ e e = f@@ actory . get@@ Script@@ En@@ gin@@ e ( L@@ A@@ N@@ G@@ U@@ A@@ G@@ E_@@ E@@ S@@ 6 ) ; final String shared@@ G@@ et@@ ter@@ Script = " foo " ; final String shared@@ Set@@ ter@@ Script = " foo ▁ = ▁ 1@@ " ; for ( int i = 0 ; i < M@@ E@@ G@@ A@@ M@@ O@@ R@@ P@@ H@@ I@@ C@@ _@@ L@@ O@@ O@@ P@@ _@@ C@@ O@@ U@@ N@@ T ; i ++ ) { assertEquals ( e . eval ( shared@@ Set@@ ter@@ Script ) , 1 ) ; assertEquals ( e . eval ( shared@@ G@@ et@@ ter@@ Script ) , 1 ) ; assertEquals ( e . eval ( " d@@ el@@ et@@ e ▁ foo ; ▁ a " + i + " ▁ = ▁ 1 ; ▁ Object . p@@ ro@@ to@@ type . foo ▁ = ▁ " + i + " ; " ) , i ) ; assertEquals ( e . eval ( shared@@ G@@ et@@ ter@@ Script ) , i ) ; } assertEquals ( e . eval ( " le@@ t ▁ foo ▁ = ▁ ' foo ' ; " ) , null ) ; assertEquals ( e . eval ( shared@@ G@@ et@@ ter@@ Script ) , " foo " ) ; assertEquals ( e . eval ( shared@@ Set@@ ter@@ Script ) , 1 ) ; assertEquals ( e . eval ( shared@@ G@@ et@@ ter@@ Script ) , 1 ) ; assertEquals ( e . eval ( " this . foo " ) , M@@ E@@ G@@ A@@ M@@ O@@ R@@ P@@ H@@ I@@ C@@ _@@ L@@ O@@ O@@ P@@ _@@ C@@ O@@ U@@ N@@ T - 1 ) ; }
 @ Be@@ fo@@ re@@ Cl@@ ass public static void in@@ it@@ T@@ es@@ t@@ Dat@@ a ( ) throws IOException { Sjukfall@@ Inty@@ g@@ G@@ en@@ er@@ ator g@@ en@@ er@@ ator = new Sjukfall@@ Inty@@ g@@ G@@ en@@ er@@ ator ( L@@ O@@ C@@ A@@ T@@ I@@ ON@@ _@@ IN@@ T@@ Y@@ G@@ S@@ D@@ A@@ T@@ A ) ; intyg@@ Data@@ List = g@@ en@@ er@@ ator . g@@ en@@ er@@ ate ( ) . get ( ) ; assertTrue ( " Ex@@ p@@ ec@@ ted ▁ 1@@ 6 ▁ bu@@ t ▁ w@@ as ▁ " + intyg@@ Data@@ List . size ( ) , intyg@@ Data@@ List . size ( ) == 1@@ 6 ) ; }
 public static String get@@ St@@ ack@@ Tr@@ ac@@ e ( final Th@@ ro@@ w@@ able e@@ x ) { final S@@ tr@@ ing@@ W@@ ri@@ ter s@@ w = new S@@ tr@@ ing@@ W@@ ri@@ ter ( ) ; final P@@ r@@ int@@ W@@ ri@@ ter p@@ w = new P@@ r@@ int@@ W@@ ri@@ ter ( s@@ w , true ) ; e@@ x . p@@ r@@ int@@ St@@ ack@@ Tr@@ ac@@ e ( p@@ w ) ; p@@ w . f@@ lu@@ s@@ h ( ) ; s@@ w . f@@ lu@@ s@@ h ( ) ; return s@@ w . to@@ String ( ) ; }
 public static void con@@ fi@@ g@@ ur@@ e ( Set@@ t@@ ings set@@ t@@ ings ) { if ( lo@@ a@@ de@@ d ) { return ; } lo@@ a@@ de@@ d = true ; En@@ vi@@ r@@ on@@ m@@ ent en@@ vi@@ r@@ on@@ m@@ ent = new En@@ vi@@ r@@ on@@ m@@ ent ( set@@ t@@ ings ) ; I@@ mm@@ ut@@ able@@ Set@@ t@@ ings . Builder set@@ t@@ ing@@ s@@ Builder = set@@ t@@ ing@@ s@@ Builder ( ) . pu@@ t ( set@@ t@@ ings ) ; res@@ ol@@ ve@@ Con@@ fi@@ g ( en@@ vi@@ r@@ on@@ m@@ ent , set@@ t@@ ing@@ s@@ Builder ) ; set@@ t@@ ing@@ s@@ Builder . put@@ P@@ roperties ( " el@@ as@@ ti@@ c@@ sear@@ ch . " , Sy@@ s@@ tem . get@@ P@@ roperties ( ) ) . put@@ P@@ roperties ( " es . " , Sy@@ s@@ tem . get@@ P@@ roperties ( ) ) . re@@ pl@@ a@@ ce@@ P@@ roper@@ ty@@ Pl@@ a@@ ce@@ ho@@ l@@ d@@ er@@ s ( ) ; P@@ roperties p@@ rop@@ s = new P@@ roperties ( ) ; for ( Map . En@@ try < String , String > entry : set@@ t@@ ing@@ s@@ Builder . bu@@ il@@ d ( ) . get@@ A@@ s@@ Map ( ) . en@@ tr@@ y@@ Se@@ t ( ) ) { String key = " lo@@ g@@ 4@@ j . " + entry . get@@ K@@ ey ( ) ; String value = entry . get@@ Value ( ) ; if ( re@@ pl@@ a@@ ce@@ m@@ en@@ ts . con@@ ta@@ in@@ s@@ K@@ ey ( value ) ) { value = re@@ pl@@ a@@ ce@@ m@@ en@@ ts . get ( value ) ; } if ( key . end@@ sWith ( " . value " ) ) { p@@ rop@@ s . set@@ P@@ roper@@ ty ( key . substring ( 0 , key . length ( ) - " . value " . length ( ) ) , value ) ; } else if ( key . end@@ sWith ( " . type " ) ) { p@@ rop@@ s . set@@ P@@ roper@@ ty ( key . substring ( 0 , key . length ( ) - " . type " . length ( ) ) , value ) ; } else { p@@ rop@@ s . set@@ P@@ roper@@ ty ( key , value ) ; } } P@@ roper@@ ty@@ Con@@ fi@@ g@@ ur@@ ator . con@@ fi@@ g@@ ur@@ e ( p@@ rop@@ s ) ; }
 @ Test public static void m@@ e@@ g@@ am@@ or@@ p@@ h@@ ic@@ S@@ ing@@ le@@ G@@ l@@ ob@@ al@@ L@@ et@@ Test ( ) throws Script@@ Exception , In@@ ter@@ r@@ up@@ te@@ d@@ Exception { final N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory f@@ actory = new N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory ( ) ; final Script@@ En@@ gin@@ e e = f@@ actory . get@@ Script@@ En@@ gin@@ e ( L@@ A@@ N@@ G@@ U@@ A@@ G@@ E_@@ E@@ S@@ 6 ) ; final String shared@@ G@@ et@@ ter@@ Script = " foo " ; final String shared@@ Set@@ ter@@ Script = " foo ▁ = ▁ 1@@ " ; for ( int i = 0 ; i < M@@ E@@ G@@ A@@ M@@ O@@ R@@ P@@ H@@ I@@ C@@ _@@ L@@ O@@ O@@ P@@ _@@ C@@ O@@ U@@ N@@ T ; i ++ ) { assertEquals ( e . eval ( shared@@ Set@@ ter@@ Script ) , 1 ) ; assertEquals ( e . eval ( shared@@ G@@ et@@ ter@@ Script ) , 1 ) ; assertEquals ( e . eval ( " d@@ el@@ et@@ e ▁ foo ; ▁ a " + i + " ▁ = ▁ 1 ; ▁ foo ▁ = ▁ " + i + " ; " ) , i ) ; assertEquals ( e . eval ( shared@@ G@@ et@@ ter@@ Script ) , i ) ; } assertEquals ( e . eval ( " le@@ t ▁ foo ▁ = ▁ ' foo ' ; " ) , null ) ; assertEquals ( e . eval ( shared@@ G@@ et@@ ter@@ Script ) , " foo " ) ; assertEquals ( e . eval ( shared@@ Set@@ ter@@ Script ) , 1 ) ; assertEquals ( e . eval ( shared@@ G@@ et@@ ter@@ Script ) , 1 ) ; assertEquals ( e . eval ( " this . foo " ) , M@@ E@@ G@@ A@@ M@@ O@@ R@@ P@@ H@@ I@@ C@@ _@@ L@@ O@@ O@@ P@@ _@@ C@@ O@@ U@@ N@@ T - 1 ) ; }
 private static File p@@ at@@ h@@ O@@ f@@ File@@ In@@ De@@ fa@@ ult@@ File@@ s ( String fi@@ le@@ P@@ ath ) { return new File ( M@@ ul@@ ti@@ p@@ le@@ Ex@@ te@@ n@@ si@@ on@@ P@@ lu@@ gin@@ W@@ i@@ th@@ P@@ lu@@ gin@@ M@@ an@@ ag@@ er@@ In@@ te@@ g@@ r@@ ati@@ on@@ Test . cl@@ ass . get@@ Cl@@ ass@@ Lo@@ a@@ der ( ) . get@@ Resour@@ c@@ e ( " de@@ fa@@ ult@@ File@@ s / " + fi@@ le@@ P@@ ath ) . get@@ File ( ) ) ; }
 public static void res@@ ol@@ ve@@ Con@@ fi@@ g ( En@@ vi@@ r@@ on@@ m@@ ent en@@ v , final I@@ mm@@ ut@@ able@@ Set@@ t@@ ings . Builder set@@ t@@ ing@@ s@@ Builder ) { try { File@@ s . w@@ al@@ k@@ File@@ T@@ re@@ e ( en@@ v . con@@ fi@@ g@@ File ( ) . to@@ P@@ ath ( ) , En@@ um@@ Se@@ t . of ( File@@ V@@ is@@ it@@ O@@ ption . F@@ O@@ L@@ L@@ O@@ W@@ _@@ L@@ IN@@ K@@ S ) , Integer . M@@ A@@ X@@ _@@ V@@ A@@ L@@ U@@ E , new Si@@ mp@@ le@@ File@@ V@@ is@@ it@@ or < P@@ ath > ( ) { @ Override public File@@ V@@ is@@ it@@ Res@@ ult v@@ is@@ it@@ File ( P@@ ath fil@@ e , B@@ as@@ ic@@ File@@ Attribu@@ te@@ s at@@ tr@@ s ) throws IOException { if ( fil@@ e . get@@ File@@ Name ( ) . to@@ String ( ) . startsWith ( " lo@@ g@@ g@@ ing . " ) ) { lo@@ ad@@ Con@@ fi@@ g ( fil@@ e , set@@ t@@ ing@@ s@@ Builder ) ; } return File@@ V@@ is@@ it@@ Res@@ ult . C@@ ON@@ T@@ IN@@ U@@ E ; } } ) ; } catch ( IOException i@@ o@@ e ) { throw new E@@ l@@ as@@ ti@@ c@@ search@@ Exception ( " F@@ a@@ ile@@ d ▁ t@@ o ▁ lo@@ a@@ d ▁ lo@@ g@@ g@@ ing ▁ con@@ fi@@ g@@ ur@@ ati@@ on " , i@@ o@@ e ) ; } }
 @ Test public static void m@@ ul@@ ti@@ Th@@ rea@@ de@@ d@@ L@@ et@@ Test ( ) throws Script@@ Exception , In@@ ter@@ r@@ up@@ te@@ d@@ Exception { final N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory f@@ actory = new N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory ( ) ; final Script@@ En@@ gin@@ e e = f@@ actory . get@@ Script@@ En@@ gin@@ e ( L@@ A@@ N@@ G@@ U@@ A@@ G@@ E_@@ E@@ S@@ 6 ) ; final B@@ in@@ d@@ ings b = e . c@@ rea@@ te@@ B@@ in@@ d@@ ings ( ) ; final Script@@ Context or@@ i@@ g@@ Context = e . get@@ Context ( ) ; final Script@@ Context new@@ C@@ t@@ xt = new Si@@ mp@@ le@@ Script@@ Context ( ) ; new@@ C@@ t@@ xt . set@@ B@@ in@@ d@@ ings ( b , Script@@ Context . E@@ N@@ G@@ IN@@ E_@@ S@@ C@@ O@@ P@@ E ) ; final String shared@@ Script = " foo " ; assertEquals ( e . eval ( " le@@ t ▁ foo ▁ = ▁ ' or@@ i@@ gin@@ al ▁ context ' ; " , or@@ i@@ g@@ Context ) , null ) ; assertEquals ( e . eval ( " le@@ t ▁ foo ▁ = ▁ ' new ▁ context ' ; " , new@@ C@@ t@@ xt ) , null ) ; final Th@@ rea@@ d t@@ 1 = new Th@@ rea@@ d ( new Script@@ R@@ un@@ n@@ er ( e , or@@ i@@ g@@ Context , shared@@ Script , " or@@ i@@ gin@@ al ▁ context " , 1@@ 0@@ 0@@ 0 ) ) ; final Th@@ rea@@ d t@@ 2 = new Th@@ rea@@ d ( new Script@@ R@@ un@@ n@@ er ( e , new@@ C@@ t@@ xt , shared@@ Script , " new ▁ context " , 1@@ 0@@ 0@@ 0 ) ) ; t@@ 1 . st@@ ar@@ t ( ) ; t@@ 2 . st@@ ar@@ t ( ) ; t@@ 1 . j@@ o@@ in ( ) ; t@@ 2 . j@@ o@@ in ( ) ; assertEquals ( e . eval ( " foo ▁ = ▁ ' new@@ er ▁ context ' ; " , new@@ C@@ t@@ xt ) , " new@@ er ▁ context " ) ; final Th@@ rea@@ d t@@ 3 = new Th@@ rea@@ d ( new Script@@ R@@ un@@ n@@ er ( e , or@@ i@@ g@@ Context , shared@@ Script , " or@@ i@@ gin@@ al ▁ context " , 1@@ 0@@ 0@@ 0 ) ) ; final Th@@ rea@@ d t@@ 4 = new Th@@ rea@@ d ( new Script@@ R@@ un@@ n@@ er ( e , new@@ C@@ t@@ xt , shared@@ Script , " new@@ er ▁ context " , 1@@ 0@@ 0@@ 0 ) ) ; t@@ 3 . st@@ ar@@ t ( ) ; t@@ 4 . st@@ ar@@ t ( ) ; t@@ 3 . j@@ o@@ in ( ) ; t@@ 4 . j@@ o@@ in ( ) ; assertEquals ( e . eval ( shared@@ Script ) , " or@@ i@@ gin@@ al ▁ context " ) ; assertEquals ( e . eval ( shared@@ Script , new@@ C@@ t@@ xt ) , " new@@ er ▁ context " ) ; }
 public static void ma@@ in ( String [ ] ar@@ g@@ s ) throws Exception { Sy@@ s@@ tem . o@@ u@@ t . p@@ r@@ int@@ l@@ n ( " \n L@@ Z@@ M@@ A ▁ ( J@@ av@@ a ) ▁ 4@@ .@@ 6@@ 1 ▁ ▁ 2@@ 0@@ 0@@ 8@@ -@@ 1@@ 1@@ -@@ 2@@ 3 \n " ) ; if ( ar@@ g@@ s . length < 1 ) { P@@ r@@ int@@ H@@ el@@ p ( ) ; return ; } Command@@ L@@ in@@ e params = new Command@@ L@@ in@@ e ( ) ; if ( ! params . Par@@ se ( ar@@ g@@ s ) ) { Sy@@ s@@ tem . o@@ u@@ t . p@@ r@@ int@@ l@@ n ( " \n In@@ cor@@ rec@@ t ▁ comm@@ and " ) ; return ; } if ( params . Command == Command@@ L@@ in@@ e . k@@ B@@ en@@ ch@@ ma@@ k ) { int d@@ ic@@ tion@@ ar@@ y = ( 1 <@@ < 2@@ 1 ) ; if ( params . D@@ ic@@ tion@@ ar@@ y@@ Si@@ z@@ e@@ I@@ s@@ De@@ fin@@ ed ) d@@ ic@@ tion@@ ar@@ y = params . D@@ ic@@ tion@@ ar@@ y@@ Size ; if ( params . M@@ at@@ ch@@ F@@ in@@ der > 1 ) throw new Exception ( " U@@ n@@ s@@ up@@ p@@ or@@ ted ▁ m@@ atch ▁ fin@@ der " ) ; S@@ ev@@ en@@ Z@@ i@@ p . L@@ z@@ ma@@ B@@ en@@ ch . L@@ z@@ ma@@ B@@ en@@ ch@@ mar@@ k ( params . N@@ um@@ B@@ en@@ ch@@ mar@@ k@@ P@@ ass@@ es , d@@ ic@@ tion@@ ar@@ y ) ; } else if ( params . Command == Command@@ L@@ in@@ e . k@@ En@@ co@@ de || params . Command == Command@@ L@@ in@@ e . k@@ De@@ co@@ de ) { java . i@@ o . File in@@ File = new java . i@@ o . File ( params . In@@ File ) ; java . i@@ o . File out@@ File = new java . i@@ o . File ( params . O@@ ut@@ File ) ; java . i@@ o . Bu@@ ff@@ e@@ re@@ d@@ In@@ put@@ Stream in@@ Stream = new java . i@@ o . Bu@@ ff@@ e@@ re@@ d@@ In@@ put@@ Stream ( new java . i@@ o . File@@ In@@ put@@ Stream ( in@@ File ) ) ; java . i@@ o . Bu@@ ff@@ e@@ re@@ d@@ O@@ ut@@ put@@ Stream out@@ Stream = new java . i@@ o . Bu@@ ff@@ e@@ re@@ d@@ O@@ ut@@ put@@ Stream ( new java . i@@ o . File@@ O@@ ut@@ put@@ Stream ( out@@ File ) ) ; boolean e@@ os = false ; if ( params . E@@ os ) e@@ os = true ; if ( params . Command == Command@@ L@@ in@@ e . k@@ En@@ co@@ de ) { S@@ ev@@ en@@ Z@@ i@@ p . Co@@ mp@@ ression . L@@ Z@@ M@@ A . En@@ coder en@@ coder = new S@@ ev@@ en@@ Z@@ i@@ p . Co@@ mp@@ ression . L@@ Z@@ M@@ A . En@@ coder ( ) ; if ( ! en@@ coder . Set@@ A@@ l@@ g@@ or@@ i@@ th@@ m ( params . A@@ l@@ g@@ or@@ i@@ th@@ m ) ) throw new Exception ( " In@@ cor@@ rec@@ t ▁ comp@@ ression ▁ m@@ o@@ de " ) ; if ( ! en@@ coder . Set@@ D@@ ic@@ tion@@ ar@@ y@@ Size ( params . D@@ ic@@ tion@@ ar@@ y@@ Size ) ) throw new Exception ( " In@@ cor@@ rec@@ t ▁ d@@ ic@@ tion@@ ar@@ y ▁ size " ) ; if ( ! en@@ coder . Set@@ N@@ um@@ F@@ ast@@ By@@ te@@ s ( params . F@@ b ) ) throw new Exception ( " In@@ cor@@ rec@@ t ▁ - f@@ b ▁ value " ) ; if ( ! en@@ coder . Set@@ M@@ at@@ ch@@ F@@ in@@ der ( params . M@@ at@@ ch@@ F@@ in@@ der ) ) throw new Exception ( " In@@ cor@@ rec@@ t ▁ - m@@ f ▁ value " ) ; if ( ! en@@ coder . Set@@ L@@ c@@ L@@ p@@ P@@ b ( params . L@@ c , params . L@@ p , params . P@@ b ) ) throw new Exception ( " In@@ cor@@ rec@@ t ▁ - l@@ c ▁ or ▁ - l@@ p ▁ or ▁ - p@@ b ▁ value " ) ; en@@ coder . Set@@ En@@ d@@ M@@ ar@@ k@@ er@@ Mo@@ de ( e@@ os ) ; en@@ coder . W@@ ri@@ te@@ Co@@ d@@ er@@ P@@ roperties ( out@@ Stream ) ; long fi@@ le@@ Size ; if ( e@@ os ) fi@@ le@@ Size = - 1 ; else fi@@ le@@ Size = in@@ File . length ( ) ; for ( int i = 0 ; i < 8 ; i ++ ) out@@ Stream . wri@@ te ( ( int ) ( fi@@ le@@ Size >@@ >@@ > ( 8 * i ) ) & 0@@ x@@ F@@ F ) ; en@@ coder . Co@@ de ( in@@ Stream , out@@ Stream , - 1 , - 1 , null ) ; } else { int p@@ roperti@@ es@@ Size = 5 ; b@@ y@@ te [ ] p@@ roperties = new b@@ y@@ te [ p@@ roperti@@ es@@ Size ] ; if ( in@@ Stream . rea@@ d ( p@@ roperties , 0 , p@@ roperti@@ es@@ Size ) != p@@ roperti@@ es@@ Size ) throw new Exception ( " in@@ pu@@ t ▁ . l@@ z@@ m@@ a ▁ fil@@ e ▁ is ▁ to@@ o ▁ sh@@ or@@ t " ) ; S@@ ev@@ en@@ Z@@ i@@ p . Co@@ mp@@ ression . L@@ Z@@ M@@ A . De@@ coder de@@ coder = new S@@ ev@@ en@@ Z@@ i@@ p . Co@@ mp@@ ression . L@@ Z@@ M@@ A . De@@ coder ( ) ; if ( ! de@@ coder . Set@@ De@@ co@@ d@@ er@@ P@@ roperties ( p@@ roperties ) ) throw new Exception ( " In@@ cor@@ rec@@ t ▁ st@@ ream ▁ p@@ roperties " ) ; long out@@ Size = 0 ; for ( int i = 0 ; i < 8 ; i ++ ) { int v = in@@ Stream . rea@@ d ( ) ; if ( v < 0 ) throw new Exception ( " C@@ an ' t ▁ rea@@ d ▁ st@@ ream ▁ size " ) ; out@@ Size |@@ = ( ( long ) v ) <@@ < ( 8 * i ) ; } if ( ! de@@ coder . Co@@ de ( in@@ Stream , out@@ Stream , out@@ Size ) ) throw new Exception ( " E@@ r@@ ro@@ r ▁ in ▁ d@@ at@@ a ▁ st@@ ream " ) ; } out@@ Stream . f@@ lu@@ s@@ h ( ) ; out@@ Stream . cl@@ o@@ se ( ) ; in@@ Stream . cl@@ o@@ se ( ) ; } else throw new Exception ( " In@@ cor@@ rec@@ t ▁ comm@@ and " ) ; return ; }
 @ Test public static void m@@ e@@ g@@ am@@ or@@ p@@ h@@ ic@@ M@@ ul@@ ti@@ G@@ l@@ ob@@ al@@ L@@ et@@ Test ( ) throws Script@@ Exception , In@@ ter@@ r@@ up@@ te@@ d@@ Exception { final N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory f@@ actory = new N@@ ash@@ or@@ n@@ Script@@ En@@ gin@@ e@@ F@@ actory ( ) ; final Script@@ En@@ gin@@ e e = f@@ actory . get@@ Script@@ En@@ gin@@ e ( L@@ A@@ N@@ G@@ U@@ A@@ G@@ E_@@ E@@ S@@ 6 ) ; final Script@@ Context [ ] con@@ te@@ x@@ ts = new Script@@ Context [ N@@ U@@ M@@ B@@ ER@@ _@@ O@@ F@@ _@@ C@@ ON@@ T@@ E@@ X@@ T@@ S ] ; final String shared@@ Script = " foo " ; for ( int i = 0 ; i < N@@ U@@ M@@ B@@ ER@@ _@@ O@@ F@@ _@@ C@@ ON@@ T@@ E@@ X@@ T@@ S ; i ++ ) { final Script@@ Context context = con@@ te@@ x@@ ts [ i ] = new Si@@ mp@@ le@@ Script@@ Context ( ) ; final B@@ in@@ d@@ ings b = e . c@@ rea@@ te@@ B@@ in@@ d@@ ings ( ) ; context . set@@ B@@ in@@ d@@ ings ( b , Script@@ Context . E@@ N@@ G@@ IN@@ E_@@ S@@ C@@ O@@ P@@ E ) ; assertEquals ( e . eval ( " le@@ t ▁ foo ▁ = ▁ ' " + i + " ' ; " , context ) , null ) ; } for ( int i = 0 ; i < N@@ U@@ M@@ B@@ ER@@ _@@ O@@ F@@ _@@ C@@ ON@@ T@@ E@@ X@@ T@@ S ; i ++ ) { final Script@@ Context context = con@@ te@@ x@@ ts [ i ] ; assertEquals ( e . eval ( shared@@ Script , context ) , String . v@@ alu@@ e@@ O@@ f ( i ) ) ; } }
 private static void assert@@ En@@ d@@ Date ( SjukfallIntyg intyg@@ s@@ Dat@@ a , String d@@ at@@ um ) { assertTrue ( intyg@@ s@@ Dat@@ a . get@@ S@@ lu@@ t@@ Dat@@ um ( ) . equals ( Lo@@ c@@ al@@ Date . par@@ se ( d@@ at@@ um ) ) ) ; }
 public static void ma@@ in ( String [ ] ar@@ g@@ s ) throws Exception { new H@@ el@@ lo@@ J@@ D@@ B@@ I@@ S@@ er@@ vic@@ e ( ) . r@@ u@@ n ( ar@@ g@@ s ) ; }
 private static void assert@@ St@@ art@@ Date ( SjukfallIntyg intyg@@ s@@ Dat@@ a , String d@@ at@@ um ) { assertTrue ( intyg@@ s@@ Dat@@ a . get@@ St@@ art@@ Dat@@ um ( ) . equals ( Lo@@ c@@ al@@ Date . par@@ se ( d@@ at@@ um ) ) ) ; }
 public static void lo@@ ad@@ Con@@ fi@@ g ( P@@ ath fil@@ e , I@@ mm@@ ut@@ able@@ Set@@ t@@ ings . Builder set@@ t@@ ing@@ s@@ Builder ) { try { set@@ t@@ ing@@ s@@ Builder . lo@@ ad@@ F@@ ro@@ m@@ U@@ r@@ l ( fil@@ e . to@@ U@@ r@@ i ( ) . to@@ U@@ R@@ L ( ) ) ; } catch ( F@@ a@@ ile@@ d@@ T@@ o@@ Res@@ ol@@ ve@@ Con@@ fi@@ g@@ Exception | N@@ o@@ Cl@@ ass@@ De@@ f@@ F@@ o@@ und@@ E@@ r@@ ro@@ r | M@@ al@@ form@@ ed@@ U@@ R@@ L@@ Exception e ) { } }
