 s@@ y@@ n@@ ch@@ r@@ on@@ i@@ z@@ ed static File@@ L@@ r@@ u@@ C@@ ache get@@ C@@ ache ( Context context ) throws IOException { if ( im@@ ag@@ e@@ C@@ ache == null ) { im@@ ag@@ e@@ C@@ ache = new File@@ L@@ r@@ u@@ C@@ ache ( context . get@@ A@@ p@@ p@@ li@@ c@@ ati@@ on@@ Context ( ) , T@@ A@@ G , new File@@ L@@ r@@ u@@ C@@ ache . L@@ im@@ it@@ s ( ) ) ; } return im@@ ag@@ e@@ C@@ ache ; }
 static In@@ put@@ Stream in@@ ter@@ ce@@ p@@ t@@ A@@ n@@ d@@ C@@ ach@@ e@@ I@@ m@@ ag@@ e@@ Stream ( Context context , H@@ t@@ t@@ p@@ U@@ R@@ L@@ Con@@ ne@@ ction con@@ ne@@ ction ) throws IOException { In@@ put@@ Stream st@@ ream = null ; if ( con@@ ne@@ ction . get@@ Res@@ p@@ on@@ se@@ Co@@ de ( ) == H@@ t@@ t@@ p@@ U@@ R@@ L@@ Con@@ ne@@ ction . H@@ T@@ T@@ P@@ _@@ O@@ K ) { U@@ R@@ L ur@@ l = con@@ ne@@ ction . get@@ U@@ R@@ L ( ) ; st@@ ream = con@@ ne@@ ction . get@@ In@@ put@@ Stream ( ) ; try { if ( is@@ C@@ D@@ N@@ U@@ R@@ L ( ur@@ l . to@@ U@@ R@@ I ( ) ) ) { File@@ L@@ r@@ u@@ C@@ ache c@@ ache = get@@ C@@ ache ( context ) ; st@@ ream = c@@ ache . in@@ ter@@ ce@@ p@@ t@@ A@@ n@@ d@@ P@@ u@@ t ( ur@@ l . to@@ String ( ) , new Bu@@ ff@@ e@@ re@@ d@@ H@@ t@@ t@@ p@@ In@@ put@@ Stream ( st@@ ream , con@@ ne@@ ction ) ) ; } } catch ( IOException e ) { } catch ( U@@ R@@ I@@ Sy@@ n@@ ta@@ x@@ Exception e ) { } } return st@@ ream ; }
 static void c@@ le@@ ar@@ C@@ ache ( Context context ) { try { get@@ C@@ ache ( context ) . c@@ le@@ ar@@ C@@ ache ( ) ; } catch ( IOException e ) { Lo@@ g@@ ger . lo@@ g ( Lo@@ g@@ g@@ ing@@ Be@@ h@@ av@@ i@@ or . C@@ A@@ C@@ H@@ E , Lo@@ g . W@@ A@@ R@@ N , T@@ A@@ G , " c@@ le@@ ar@@ C@@ ache ▁ fa@@ ile@@ d ▁ " + e . get@@ Messag@@ e ( ) ) ; } }
 static In@@ put@@ Stream get@@ C@@ ach@@ ed@@ I@@ m@@ ag@@ e@@ Stream ( U@@ R@@ I ur@@ l , Context context ) { In@@ put@@ Stream im@@ ag@@ e@@ Stream = null ; if ( ur@@ l != null ) { if ( is@@ C@@ D@@ N@@ U@@ R@@ L ( ur@@ l ) ) { try { File@@ L@@ r@@ u@@ C@@ ache c@@ ache = get@@ C@@ ache ( context ) ; im@@ ag@@ e@@ Stream = c@@ ache . get ( ur@@ l . to@@ String ( ) ) ; } catch ( IOException e ) { Lo@@ g@@ ger . lo@@ g ( Lo@@ g@@ g@@ ing@@ Be@@ h@@ av@@ i@@ or . C@@ A@@ C@@ H@@ E , Lo@@ g . W@@ A@@ R@@ N , T@@ A@@ G , e . to@@ String ( ) ) ; } } } return im@@ ag@@ e@@ Stream ; }
 private static void set@@ In@@ stan@@ ce@@ o@@ f@@ ed ( Cl@@ a@@ z@@ z cl@@ a@@ z@@ z ) { Cl@@ ass@@ O@@ pti@@ m@@ i@@ z@@ ati@@ on@@ In@@ fo in@@ fo = Cl@@ ass@@ O@@ pti@@ m@@ i@@ z@@ ati@@ on@@ In@@ fo . get@@ Cl@@ ass@@ O@@ pti@@ m@@ i@@ z@@ ati@@ on@@ In@@ fo ( cl@@ a@@ z@@ z ) ; if ( in@@ fo != null ) { in@@ fo . set@@ In@@ stan@@ ce@@ o@@ f@@ ed ( ) ; } }
 @ De@@ p@@ rec@@ ate@@ d public static List < List@@ View@@ Column > get@@ De@@ fa@@ ult@@ Colum@@ n@@ s ( ) { return List@@ View@@ Column . c@@ rea@@ te@@ De@@ fa@@ ult@@ In@@ i@@ ti@@ al@@ Colum@@ n@@ List ( ) ; }
 private static boolean is@@ C@@ D@@ N@@ U@@ R@@ L ( U@@ R@@ I ur@@ l ) { if ( ur@@ l != null ) { String ur@@ i@@ H@@ o@@ st = ur@@ l . get@@ H@@ o@@ st ( ) ; if ( ur@@ i@@ H@@ o@@ st . end@@ sWith ( " f@@ b@@ c@@ d@@ n . ne@@ t " ) ) { return true ; } if ( ur@@ i@@ H@@ o@@ st . startsWith ( " f@@ b@@ c@@ d@@ n " ) && ur@@ i@@ H@@ o@@ st . end@@ sWith ( " ak@@ am@@ a@@ i@@ h@@ d . ne@@ t " ) ) { return true ; } } return false ; }
 public static boolean is@@ In@@ stan@@ ce@@ o@@ f@@ ed ( Cl@@ a@@ z@@ z cl@@ a@@ z@@ z ) { Cl@@ ass@@ O@@ pti@@ m@@ i@@ z@@ ati@@ on@@ In@@ fo in@@ fo = Cl@@ ass@@ O@@ pti@@ m@@ i@@ z@@ ati@@ on@@ In@@ fo . get@@ Cl@@ ass@@ O@@ pti@@ m@@ i@@ z@@ ati@@ on@@ In@@ fo ( cl@@ a@@ z@@ z ) ; return in@@ fo == null || in@@ fo . is@@ In@@ stan@@ ce@@ o@@ f@@ ed ( ) ; }
