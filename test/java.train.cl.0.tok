 public int getResultStartPosition ( ) { return resultStartPosition ; }
 @ Test public void testFall6 ( ) { String key = "19800207-9294" ; Map < String , List < SjukfallIntyg > > map = creator . create ( intygDataList , parameters ) ; List < SjukfallIntyg > list = map . get ( key ) ; assertTrue ( " Expected ▁ 2 ▁ but ▁ was ▁ " + list . size ( ) , list . size ( ) == 2 ) ; assertStartDate ( list . get ( 0 ) , "2016-02-12" ) ; assertEndDate ( list . get ( 1 ) , "2016-02-25" ) ; assertFalse ( list . get ( 0 ) . isAktivtIntyg ( ) ) ; assertTrue ( list . get ( 1 ) . isAktivtIntyg ( ) ) ; }
 public int getResultLength ( ) { return resultLength ; }
 public void printlnWithTimestamp ( String message ) throws IOException { System . out . println ( formatCurrentTime ( ) + " ▁ ▁ " + message ) ; }
 @ Test public void testFall3 ( ) { String key = "19791212-9280" ; Map < String , List < SjukfallIntyg > > map = creator . create ( intygDataList , parameters ) ; List < SjukfallIntyg > list = map . get ( key ) ; assertTrue ( " Expected ▁ 3 ▁ but ▁ was ▁ " + list . size ( ) , list . size ( ) == 3 ) ; assertStartDate ( list . get ( 0 ) , "2016-02-01" ) ; assertEndDate ( list . get ( 2 ) , "2016-02-25" ) ; assertTrue ( list . get ( 1 ) . isAktivtIntyg ( ) ) ; }
 public void testMerge3 ( ) { List < String > a = Arrays . asList ( " a " , " b " , " d " , " e " ) ; List < String > b = Arrays . asList ( " b " , " c " , " d " , " e " ) ; List < String > c = Arrays . asList ( " a " , " b " , " c " , " e " , " f " ) ; Comparator < String > comparator = new Comparator < String > ( ) { public int compare ( String o1 , String o2 ) { return o1 . compareTo ( o2 ) ; } } ; Iterator < Triple < String , String , String > > iter = Iterables . merge ( a , b , c , comparator ) . iterator ( ) ; assertEquals ( iter . next ( ) , new Triple < String , String , String > ( " b " , " b " , " b " ) ) ; assertEquals ( iter . next ( ) , new Triple < String , String , String > ( " e " , " e " , " e " ) ) ; assertTrue ( ! iter . hasNext ( ) ) ; }
 public void setNeedUsernames ( boolean value ) { needUsernames = value ; }
 @ Override public int compare ( TLRPC . User lhs , TLRPC . User rhs ) { int lhsNum = users . indexOf ( lhs . id ) ; int rhsNum = users . indexOf ( rhs . id ) ; if ( lhsNum != - 1 && rhsNum != - 1 ) { return lhsNum < rhsNum ? - 1 : ( lhsNum == rhsNum ? 0 : 1 ) ; } else if ( lhsNum != - 1 && rhsNum == - 1 ) { return - 1 ; } else if ( lhsNum == - 1 && rhsNum != - 1 ) { return 1 ; } return 0 ; }
 @ Override protected void setHashtags ( ArrayList < HashtagObject > arrayList , HashMap < String , HashtagObject > hashMap ) { super . setHashtags ( arrayList , hashMap ) ; if ( lastText != null ) { searchUsernameOrHashtag ( lastText , lastPosition , messages ) ; } }
 public void testZip ( ) { String [ ] s1 = new String [ ] { " a " , " b " , " c " } ; Integer [ ] s2 = new Integer [ ] { 1 , 2 , 3 , 4 } ; int count = 0 ; for ( Pair < String , Integer > pair : Iterables . zip ( s1 , s2 ) ) { assertEquals ( pair . first , s1 [ count ] ) ; assertEquals ( pair . second , s2 [ count ] ) ; count ++ ; } assertEquals ( s1 . length < s2 . length ? s1 . length : s2 . length , count ) ; }
 @ Override public void initialize ( Bootstrap < HelloWorldConfiguration > bootstrap ) { bootstrap . addBundle ( new ViewBundle < > ( ) ) ; bootstrap . addBundle ( new JdbiExceptionsBundle ( ) ) ; }
 public int compare ( String o1 , String o2 ) { return o1 . split ( " ▁ " ) [ 0 ] . compareTo ( o2 . split ( " ▁ " ) [ 0 ] ) ; }
 public OptionBuilder argument ( String argument ) { this . argument = argument ; return this ; }
 @ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ this ▁ attribute ▁ has ▁ lower ▁ attribute ▁ id ▁ than ▁ argument " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfThisAttributeHasLowerAttributeIdThanArgument ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( 1 ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; PersonAttribute other = new PersonAttribute ( 2 ) ; other . setAttributeType ( new PersonAttributeType ( 1 ) ) ; Assert . assertTrue ( pa . compareTo ( other ) < 0 ) ; }
 public OptionBuilder completer ( OptionCompleter completer ) { this . completer = completer ; return this ; }
 @ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ other ▁ attribute ▁ has ▁ lower ▁ value " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfOtherAttributeHasLowerValue ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; pa . setValue ( "2" ) ; PersonAttribute other = new PersonAttribute ( ) ; other . setAttributeType ( new PersonAttributeType ( 1 ) ) ; other . setValue ( "1" ) ; Assert . assertTrue ( pa . compareTo ( other ) > 0 ) ; }
 @ SuppressWarnings ( " unchecked " ) public void testChain ( ) { List < String > s1 = Arrays . asList ( new String [ ] { " hi " , " there " } ) ; List < String > s2 = Arrays . asList ( new String [ ] { } ) ; List < String > s3 = Arrays . asList ( new String [ ] { " yoo " } ) ; List < String > s4 = Arrays . asList ( new String [ ] { } ) ; List < String > answer = Arrays . asList ( new String [ ] { " yoo " , " hi " , " there " , " yoo " } ) ; List < String > chained = new ArrayList < String > ( ) ; for ( String s : Iterables . chain ( s3 , s1 , s2 , s3 , s4 ) ) { chained . add ( s ) ; } assertEquals ( answer , chained ) ; }
 public boolean apply ( CmsHistoryResourceBean bean ) { return true ; }
 @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { String path = historyRes . getRootPath ( ) ; String siteRoot = CmsCoreProvider . get ( ) . getSiteRoot ( ) ; if ( path . startsWith ( siteRoot ) ) { path = path . substring ( siteRoot . length ( ) ) ; if ( ! path . startsWith ( " / " ) ) { path = " / " + path ; } } return path ; }
 public void setBotsCount ( int count ) { botsCount = count ; }
 @ Override public boolean isEnabled ( int position ) { return true ; }
 public OptionBuilder addDefaultValue ( String defaultValue ) { this . defaultValues . add ( defaultValue ) ; return this ; }
 public boolean isLongClickEnabled ( ) { return searchResultHashtags != null ; }
 @ Test public void testFall2 ( ) { String key = "19791123-9262" ; Map < String , List < SjukfallIntyg > > map = creator . create ( intygDataList , parameters ) ; List < SjukfallIntyg > list = map . get ( key ) ; assertTrue ( " Expected ▁ 2 ▁ but ▁ was ▁ " + list . size ( ) , list . size ( ) == 2 ) ; assertStartDate ( list . get ( 0 ) , "2016-02-01" ) ; assertEndDate ( list . get ( 1 ) , "2016-02-20" ) ; assertTrue ( list . get ( 1 ) . isAktivtIntyg ( ) ) ; }
 public void add ( TaskAttemptInfo taskattemptInfo ) { taskAttempt . add ( taskattemptInfo ) ; }
 public String getCity_code ( ) { return city_code ; }
 @ Override public List < DataType > calculateOutputDataTypes ( List < DataType > inputDataTypes ) { Preconditions . checkState ( inputDataTypes != null && inputDataTypes . size ( ) == 2 , " Expected ▁ exactly ▁ 2 ▁ input ▁ datatypes ▁ for ▁ % s , ▁ got ▁ % s " , getClass ( ) , inputDataTypes ) ; Preconditions . checkState ( inputDataTypes . get ( 1 ) . isIntType ( ) , " Datatype ▁ for ▁ input ▁ 1 ▁ ( Segment ▁ IDs ) ▁ must ▁ be ▁ an ▁ integer ▁ type , ▁ got ▁ % s " , inputDataTypes . get ( 1 ) ) ; return Collections . singletonList ( inputDataTypes . get ( 0 ) ) ; }
 @ Override public View getView ( int i , View view , ViewGroup viewGroup ) { if ( view == null ) { view = new MentionCell ( mContext ) ; ( ( MentionCell ) view ) . setIsDarkTheme ( isDarkTheme ) ; } if ( searchResultUsernames != null ) { ( ( MentionCell ) view ) . setUser ( searchResultUsernames . get ( i ) ) ; } else if ( searchResultHashtags != null ) { ( ( MentionCell ) view ) . setText ( searchResultHashtags . get ( i ) ) ; } else if ( searchResultCommands != null ) { ( ( MentionCell ) view ) . setBotCommand ( searchResultCommands . get ( i ) , searchResultCommandsHelp . get ( i ) , searchResultCommandsUsers . get ( i ) ) ; } return view ; }
 public void setProvince_id ( int province_id ) { this . province_id = province_id ; }
 @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { if ( historyRes . getPublishDate ( ) != null ) { return historyRes . getPublishDate ( ) . getDateText ( ) ; } return " - " ; }
 public void searchUsernameOrHashtag ( String text , int position , ArrayList < MessageObject > messageObjects ) { if ( text == null || text . length ( ) == 0 ) { delegate . needChangePanelVisibility ( false ) ; lastText = null ; return ; } int searchPostion = position ; if ( text . length ( ) > 0 ) { searchPostion -- ; } lastText = null ; StringBuilder result = new StringBuilder ( ) ; int foundType = - 1 ; boolean hasIllegalUsernameCharacters = false ; for ( int a = searchPostion ; a >= 0 ; a -- ) { if ( a >= text . length ( ) ) { continue ; } char ch = text . charAt ( a ) ; if ( a == 0 || text . charAt ( a - 1 ) == ' ▁ ' || text . charAt ( a - 1 ) == ' \n ' ) { if ( needUsernames && ch == ' @ ' ) { if ( hasIllegalUsernameCharacters ) { delegate . needChangePanelVisibility ( false ) ; return ; } if ( info == null ) { lastText = text ; lastPosition = position ; messages = messageObjects ; delegate . needChangePanelVisibility ( false ) ; return ; } foundType = 0 ; resultStartPosition = a ; resultLength = result . length ( ) + 1 ; break ; } else if ( ch == ' # ' ) { if ( ! hashtagsLoadedFromDb ) { loadRecentHashtags ( ) ; lastText = text ; lastPosition = position ; messages = messageObjects ; delegate . needChangePanelVisibility ( false ) ; return ; } foundType = 1 ; resultStartPosition = a ; resultLength = result . length ( ) + 1 ; result . insert ( 0 , ch ) ; break ; } else if ( a == 0 && botInfo != null && ch == ' / ' ) { foundType = 2 ; resultStartPosition = a ; resultLength = result . length ( ) + 1 ; break ; } } if ( ! ( ch >= '0' && ch <= '9' || ch >= ' a ' && ch <= ' z ' || ch >= ' A ' && ch <= ' Z ' || ch == ' _ ' ) ) { hasIllegalUsernameCharacters = true ; } result . insert ( 0 , ch ) ; } if ( foundType == - 1 ) { delegate . needChangePanelVisibility ( false ) ; return ; } if ( foundType == 0 ) { final ArrayList < Integer > users = new ArrayList < > ( ) ; for ( int a = 0 ; a < Math . min ( 100 , messageObjects . size ( ) ) ; a ++ ) { int from_id = messageObjects . get ( a ) . messageOwner . from_id ; if ( ! users . contains ( from_id ) ) { users . add ( from_id ) ; } } String usernameString = result . toString ( ) . toLowerCase ( ) ; ArrayList < TLRPC . User > newResult = new ArrayList < > ( ) ; for ( TLRPC . TL_chatParticipant chatParticipant : info . participants ) { TLRPC . User user = MessagesController . getInstance ( ) . getUser ( chatParticipant . user_id ) ; if ( user == null || UserObject . isUserSelf ( user ) ) { continue ; } if ( user . username != null && user . username . length ( ) > 0 && ( usernameString . length ( ) > 0 && user . username . toLowerCase ( ) . startsWith ( usernameString ) || usernameString . length ( ) == 0 ) ) { newResult . add ( user ) ; } } searchResultHashtags = null ; searchResultCommands = null ; searchResultCommandsHelp = null ; searchResultCommandsUsers = null ; searchResultUsernames = newResult ; Collections . sort ( searchResultUsernames , new Comparator < TLRPC . User > ( ) { @ Override public int compare ( TLRPC . User lhs , TLRPC . User rhs ) { int lhsNum = users . indexOf ( lhs . id ) ; int rhsNum = users . indexOf ( rhs . id ) ; if ( lhsNum != - 1 && rhsNum != - 1 ) { return lhsNum < rhsNum ? - 1 : ( lhsNum == rhsNum ? 0 : 1 ) ; } else if ( lhsNum != - 1 && rhsNum == - 1 ) { return - 1 ; } else if ( lhsNum == - 1 && rhsNum != - 1 ) { return 1 ; } return 0 ; } } ) ; notifyDataSetChanged ( ) ; delegate . needChangePanelVisibility ( ! newResult . isEmpty ( ) ) ; } else if ( foundType == 1 ) { ArrayList < String > newResult = new ArrayList < > ( ) ; String hashtagString = result . toString ( ) . toLowerCase ( ) ; for ( HashtagObject hashtagObject : hashtags ) { if ( hashtagObject != null && hashtagObject . hashtag != null && hashtagObject . hashtag . startsWith ( hashtagString ) ) { newResult . add ( hashtagObject . hashtag ) ; } } searchResultHashtags = newResult ; searchResultUsernames = null ; searchResultCommands = null ; searchResultCommandsHelp = null ; searchResultCommandsUsers = null ; notifyDataSetChanged ( ) ; delegate . needChangePanelVisibility ( ! newResult . isEmpty ( ) ) ; } else if ( foundType == 2 ) { ArrayList < String > newResult = new ArrayList < > ( ) ; ArrayList < String > newResultHelp = new ArrayList < > ( ) ; ArrayList < TLRPC . User > newResultUsers = new ArrayList < > ( ) ; String command = result . toString ( ) . toLowerCase ( ) ; for ( HashMap . Entry < Integer , TLRPC . BotInfo > entry : botInfo . entrySet ( ) ) { for ( TLRPC . TL_botCommand botCommand : entry . getValue ( ) . commands ) { if ( botCommand != null && botCommand . command != null && botCommand . command . startsWith ( command ) ) { newResult . add ( " / " + botCommand . command ) ; newResultHelp . add ( botCommand . description ) ; newResultUsers . add ( MessagesController . getInstance ( ) . getUser ( entry . getValue ( ) . user_id ) ) ; } } } searchResultHashtags = null ; searchResultUsernames = null ; searchResultCommands = newResult ; searchResultCommandsHelp = newResultHelp ; searchResultCommandsUsers = newResultUsers ; notifyDataSetChanged ( ) ; delegate . needChangePanelVisibility ( ! newResult . isEmpty ( ) ) ; } }
 @ Override public int getViewTypeCount ( ) { return 1 ; }
 public String formatCurrentTime ( ) { return formatTime ( System . currentTimeMillis ( ) ) ; }
 public boolean canConvert ( Class type ) { return ( type == BrickCanvas . class ) ; }
 public long getIntervalMillis ( ) throws IOException { return finishTimeEpoch - startTimeEpoch ; }
 @ Override public void run ( ) { try { for ( int i = 0 ; i < iterations ; i ++ ) { assertEquals ( engine . eval ( source , context ) , expected ) ; } } catch ( final ScriptException se ) { throw new RuntimeException ( se ) ; } }
 @ SuppressWarnings ( " synthetic - access " ) public void execute ( CmsHistoryResourceBean historyRes ) { m_handler . revert ( historyRes ) ; }
 private void addColumn ( String label , int width , Column < CmsHistoryResourceBean , ? > col ) { addColumn ( col , label ) ; setColumnWidth ( col , width , Unit . PX ) ; }
 @ Test @ Verifies ( value = " should ▁ load ▁ class ▁ in ▁ format ▁ property " , method = " getHydratedObject ( ) " ) public void getHydratedObject_shouldLoadClassInFormatProperty ( ) throws Exception { PersonAttributeType type = new PersonAttributeType ( ) ; type . setFormat ( " org . openmrs . Concept " ) ; PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setAttributeType ( type ) ; pa . setValue ( "5089" ) ; Concept concept = ( Concept ) pa . getHydratedObject ( ) ; Assert . assertEquals ( 5089 , concept . getConceptId ( ) . intValue ( ) ) ; }
 public void startTime ( ) throws IOException { startTimeEpoch = System . currentTimeMillis ( ) ; }
 public OptionBuilder isProperty ( boolean isProperty ) { this . isProperty = isProperty ; return this ; }
 public void testSample ( ) { Iterable < Integer > items = Arrays . asList ( 5 , 4 , 3 , 2 , 1 ) ; int count = 0 ; for ( Integer item : Iterables . sample ( items , 5 , 2 , new Random ( ) ) ) { ++ count ; Assert . assertTrue ( item <= 5 ) ; Assert . assertTrue ( item >= 1 ) ; } Assert . assertEquals ( 2 , count ) ; }
 @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return historyRes . getModificationDate ( ) . getDateText ( ) ; }
 @ Override public boolean hasStableIds ( ) { return true ; }
 @ Test public void testFall7 ( ) { String key = "19800228-9224" ; Map < String , List < SjukfallIntyg > > map = creator . create ( intygDataList , parameters ) ; assertNull ( map . get ( key ) ) ; }
 public boolean Parse ( String [ ] args ) throws Exception { int pos = 0 ; boolean switchMode = true ; for ( int i = 0 ; i < args . length ; i ++ ) { String s = args [ i ] ; if ( s . length ( ) == 0 ) return false ; if ( switchMode ) { if ( s . compareTo ( " - - " ) == 0 ) { switchMode = false ; continue ; } if ( s . charAt ( 0 ) == ' - ' ) { String sw = s . substring ( 1 ) . toLowerCase ( ) ; if ( sw . length ( ) == 0 ) return false ; try { if ( ! ParseSwitch ( sw ) ) return false ; } catch ( NumberFormatException e ) { return false ; } continue ; } } if ( pos == 0 ) { if ( s . equalsIgnoreCase ( " e " ) ) Command = kEncode ; else if ( s . equalsIgnoreCase ( " d " ) ) Command = kDecode ; else if ( s . equalsIgnoreCase ( " b " ) ) Command = kBenchmak ; else return false ; } else if ( pos == 1 ) { if ( Command == kBenchmak ) { try { NumBenchmarkPasses = Integer . parseInt ( s ) ; if ( NumBenchmarkPasses < 1 ) return false ; } catch ( NumberFormatException e ) { return false ; } } else InFile = s ; } else if ( pos == 2 ) OutFile = s ; else return false ; pos ++ ; continue ; } return true ; }
 boolean ParseSwitch ( String s ) { if ( s . startsWith ( " d " ) ) { DictionarySize = 1 << Integer . parseInt ( s . substring ( 1 ) ) ; DictionarySizeIsDefined = true ; } else if ( s . startsWith ( " fb " ) ) { Fb = Integer . parseInt ( s . substring ( 2 ) ) ; FbIsDefined = true ; } else if ( s . startsWith ( " a " ) ) Algorithm = Integer . parseInt ( s . substring ( 1 ) ) ; else if ( s . startsWith ( " lc " ) ) Lc = Integer . parseInt ( s . substring ( 2 ) ) ; else if ( s . startsWith ( " lp " ) ) Lp = Integer . parseInt ( s . substring ( 2 ) ) ; else if ( s . startsWith ( " pb " ) ) Pb = Integer . parseInt ( s . substring ( 2 ) ) ; else if ( s . startsWith ( " eos " ) ) Eos = true ; else if ( s . startsWith ( " mf " ) ) { String mfs = s . substring ( 2 ) ; if ( mfs . equals ( " bt2" ) ) MatchFinder = 0 ; else if ( mfs . equals ( " bt4" ) ) MatchFinder = 1 ; else if ( mfs . equals ( " bt4b " ) ) MatchFinder = 2 ; else return false ; } else return false ; return true ; }
 public OptionBuilder valueSeparator ( char valueSeparator ) { this . valueSeparator = valueSeparator ; return this ; }
 public < T > Invoker < T > join ( Directory < T > directory ) throws RpcException { return new BroadcastClusterInvoker < T > ( directory ) ; }
 public OptionBuilder description ( String description ) { this . description = description ; return this ; }
 public boolean apply ( CmsHistoryResourceBean bean ) { return bean . getVersion ( ) . getVersionNumber ( ) != null ; }
 public void marshal ( Object source , HierarchicalStreamWriter writer , MarshallingContext context ) { BrickCanvas canvas = ( BrickCanvas ) source ; writer . startNode ( " canvasBackgroundImage " ) ; context . convertAnother ( canvas . getBackgroundImage ( ) ) ; writer . endNode ( ) ; writer . startNode ( " bricksOnCanvas " ) ; for ( Object obj : canvas . getBricks ( ) ) { if ( obj instanceof Brick ) { writer . startNode ( obj . getClass ( ) . getName ( ) ) ; context . convertAnother ( obj ) ; writer . endNode ( ) ; } } writer . endNode ( ) ; }
 @ Override public boolean isEmpty ( ) { if ( searchResultUsernames != null ) { return searchResultUsernames . isEmpty ( ) ; } else if ( searchResultHashtags != null ) { return searchResultHashtags . isEmpty ( ) ; } else if ( searchResultCommands != null ) { return searchResultCommands . isEmpty ( ) ; } return true ; }
 @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return " " + historyRes . getSize ( ) ; }
 public OptionBuilder converter ( Class < ? extends CLConverter > converter ) { this . converter = converter ; return this ; }
 @ Override public Object getItem ( int i ) { if ( searchResultUsernames != null ) { if ( i < 0 || i >= searchResultUsernames . size ( ) ) { return null ; } return searchResultUsernames . get ( i ) ; } else if ( searchResultHashtags != null ) { if ( i < 0 || i >= searchResultHashtags . size ( ) ) { return null ; } return searchResultHashtags . get ( i ) ; } else if ( searchResultCommands != null ) { if ( i < 0 || i >= searchResultCommands . size ( ) ) { return null ; } if ( searchResultCommandsUsers != null && botsCount != 1 ) { return String . format ( " % s @ % s " , searchResultCommands . get ( i ) , searchResultCommandsUsers . get ( i ) . username ) ; } return searchResultCommands . get ( i ) ; } return null ; }
 public int compare ( String o1 , String o2 ) { return o1 . compareTo ( o2 ) ; }
 @ Test @ Verifies ( value = " should ▁ return ▁ true ▁ if ▁ attributeType ▁ value ▁ and ▁ void ▁ status ▁ are ▁ the ▁ same " , method = " equalsContent ( PersonAttribute ) " ) public void equalsContent_shouldReturnTrueIfAttributeTypeValueAndVoidStatusAreTheSame ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; pa . setValue ( "1" ) ; pa . setVoided ( false ) ; PersonAttribute other = new PersonAttribute ( 1 ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; pa . setValue ( "1" ) ; pa . setVoided ( false ) ; Assert . assertTrue ( pa . equalsContent ( other ) ) ; }
 public void setChatInfo ( TLRPC . ChatParticipants chatParticipants ) { info = chatParticipants ; if ( lastText != null ) { searchUsernameOrHashtag ( lastText , lastPosition , messages ) ; } }
 @ Test public void testReducedMap ( ) { Map < String , List < SjukfallIntyg > > map = creator . createMap ( intygDataList , parameters ) ; Map < String , List < SjukfallIntyg > > reducedMap = creator . reduceMap ( map ) ; assertTrue ( " Expected ▁ 6 ▁ but ▁ was ▁ " + reducedMap . size ( ) , reducedMap . size ( ) == 6 ) ; }
 public ZipEntry getEntry ( String name ) { ZipEntry entry = super . getEntry ( name ) ; if ( ( entry != null ) && ( entry . getSize ( ) == 0 ) && ! entry . isDirectory ( ) ) { ZipEntry dirEntry = super . getEntry ( name + ' / ' ) ; if ( dirEntry != null ) { entry = dirEntry ; } } return entry ; }
 @ Test @ Verifies ( value = " should ▁ not ▁ throw ▁ exception ▁ if ▁ attribute ▁ type ▁ is ▁ null " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldNotThrowExceptionIfAttributeTypeIdIsNull ( ) throws Exception { Assert . assertTrue ( new PersonAttribute ( 1 ) . compareTo ( new PersonAttribute ( 1 ) ) == 0 ) ; }
 @ Test public void testFall1 ( ) { String key = "19791110-9291" ; Map < String , List < SjukfallIntyg > > map = creator . create ( intygDataList , parameters ) ; List < SjukfallIntyg > list = map . get ( key ) ; assertTrue ( " Expected ▁ 2 ▁ but ▁ was ▁ " + list . size ( ) , list . size ( ) == 2 ) ; assertStartDate ( list . get ( 0 ) , "2016-02-01" ) ; assertEndDate ( list . get ( 1 ) , "2016-02-20" ) ; assertTrue ( list . get ( 1 ) . isAktivtIntyg ( ) ) ; }
 public OptionBuilder fieldName ( String fieldName ) { this . fieldName = fieldName ; return this ; }
 private void addSizeColumn ( ) { Column < CmsHistoryResourceBean , ? > col = new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return " " + historyRes . getSize ( ) ; } } ; addColumn ( col , CmsHistoryMessages . columnSize ( ) ) ; setColumnWidth ( col , 100 , Unit . PX ) ; }
 @ Override public Object generate ( Client < ? > client , String dataType ) { final String generatedId = " Select ▁ now ( ) ▁ from ▁ system . schema _ columns " ; ResultSet rSet = ( ( DSClient ) client ) . execute ( generatedId , null ) ; UUID uuid = rSet . iterator ( ) . next ( ) . getUUID ( 0 ) ; return uuid ; }
 public Object getKey ( CmsHistoryResourceBean item ) { return item . getStructureId ( ) + " _ " + item . getVersion ( ) ; }
 @ Before public void setUpPluginInfrastructure ( ) throws IOException { PLUGIN_DIR . mkdirs ( ) ; BUNDLE_DIR . mkdirs ( ) ; try { pluginManager . startInfrastructure ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } jarChangeListener . pluginJarAdded ( new PluginFileDetails ( pathOfFileInDefaultFiles ( " plugin - with - multiple - extensions . jar " ) , false ) ) ; }
 public ArrayList < TaskAttemptInfo > getTaskAttempts ( ) { return taskAttempt ; }
 @ Override public void close ( ) { try { bigtableResultScanner . close ( ) ; } catch ( IOException ioe ) { throw Throwables . propagate ( ioe ) ; } }
 public OptionBuilder required ( boolean required ) { this . required = required ; return this ; }
 public void testGroup ( ) { String [ ] input = new String [ ] { "0 ▁ ab " , "0 ▁ bb " , "0 ▁ cc " , "1 ▁ dd " , "2 ▁ dd " , "2 ▁ kj " , "3 ▁ kj " , "3 ▁ kk " } ; int [ ] counts = new int [ ] { 3 , 1 , 2 , 2 } ; Comparator < String > fieldOne = new Comparator < String > ( ) { public int compare ( String o1 , String o2 ) { return o1 . split ( " ▁ " ) [ 0 ] . compareTo ( o2 . split ( " ▁ " ) [ 0 ] ) ; } } ; int index = 0 ; int group = 0 ; for ( Iterable < String > set : Iterables . group ( Arrays . asList ( input ) , fieldOne ) ) { String sharedKey = null ; int thisCount = 0 ; for ( String line : set ) { String thisKey = line . split ( " ▁ " ) [ 0 ] ; if ( sharedKey == null ) { sharedKey = thisKey ; } else { assertEquals ( " Wrong ▁ key " , sharedKey , thisKey ) ; } assertEquals ( " Wrong ▁ input ▁ line " , line , input [ index ++ ] ) ; thisCount ++ ; } assertEquals ( " Wrong ▁ number ▁ of ▁ items ▁ in ▁ this ▁ iterator " , counts [ group ++ ] , thisCount ) ; } assertEquals ( " Didn ' t ▁ get ▁ all ▁ inputs " , input . length , index ) ; assertEquals ( " Wrong ▁ number ▁ of ▁ groups " , counts . length , group ) ; }
 @ Bean public JacksonJsonProvider jsonProvider ( ) { return new JacksonJsonProvider ( ) ; }
 public void testMerge ( ) { List < String > a = Arrays . asList ( " a " , " b " , " d " , " e " ) ; List < String > b = Arrays . asList ( " b " , " c " , " d " , " e " ) ; Comparator < String > comparator = new Comparator < String > ( ) { public int compare ( String o1 , String o2 ) { return o1 . compareTo ( o2 ) ; } } ; Iterator < Pair < String , String > > iter = Iterables . merge ( a , b , comparator ) . iterator ( ) ; assertEquals ( iter . next ( ) , new Pair < String , String > ( " b " , " b " ) ) ; assertEquals ( iter . next ( ) , new Pair < String , String > ( " d " , " d " ) ) ; assertEquals ( iter . next ( ) , new Pair < String , String > ( " e " , " e " ) ) ; assertTrue ( ! iter . hasNext ( ) ) ; }
 @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return historyRes . getUserLastModified ( ) ; }
 public void setId ( int id ) { this . id = id ; }
 private void addPublishDateColumn ( ) { addColumn ( CmsHistoryMessages . columnPublishDate ( ) , 190 , new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { if ( historyRes . getPublishDate ( ) != null ) { return historyRes . getPublishDate ( ) . getDateText ( ) ; } return " - " ; } } ) ; }
 @ Override public String tensorflowName ( ) { return " SegmentMin " ; }
 public OptionBuilder hasMultipleValues ( boolean hasMultipleValues ) { this . hasMultipleValues = hasMultipleValues ; return this ; }
 public void setBotInfo ( HashMap < Integer , TLRPC . BotInfo > info ) { botInfo = info ; }
 @ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ other ▁ attribute ▁ has ▁ earlier ▁ date ▁ created " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfOtherAttributeHasEarlierDateCreated ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; pa . setDateCreated ( new Date ( ) ) ; PersonAttribute other = new PersonAttribute ( ) ; pa . setDateCreated ( new Date ( pa . getDateCreated ( ) . getTime ( ) - 1000 ) ) ; Assert . assertTrue ( pa . compareTo ( other ) < 0 ) ; }
 private void addRevertColumn ( ) { CmsButtonCell < CmsHistoryResourceBean > replaceCell = new CmsButtonCell < CmsHistoryResourceBean > ( CmsHistoryMessages . titleRevert ( ) , I_CmsImageBundle . INSTANCE . style ( ) . tableReplaceIcon ( ) , new ActionCell . Delegate < CmsHistoryResourceBean > ( ) { @ SuppressWarnings ( " synthetic - access " ) public void execute ( CmsHistoryResourceBean historyRes ) { m_handler . revert ( historyRes ) ; } } , new Predicate < CmsHistoryResourceBean > ( ) { public boolean apply ( CmsHistoryResourceBean bean ) { return bean . getVersion ( ) . getVersionNumber ( ) != null ; } } ) ; addColumn ( CmsHistoryMessages . columnReplace ( ) , 30 , new IdentityColumn < CmsHistoryResourceBean > ( replaceCell ) ) ; }
 @ Override public Result next ( ) throws IOException { Row row = bigtableResultScanner . next ( ) ; if ( row == null ) { return null ; } return rowAdapter . adaptResponse ( row ) ; }
 public String getCity_name ( ) { return city_name ; }
 private void addUserLastModifiedColumn ( ) { addColumn ( CmsHistoryMessages . columnUserLastModified ( ) , 120 , new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return historyRes . getUserLastModified ( ) ; } } ) ; }
 public OptionBuilder optionType ( OptionType optionType ) { this . optionType = optionType ; return this ; }
 public void testFilter ( ) { List < String > values = Arrays . asList ( " a " , " HI " , " tHere " , " YO " ) ; Iterator < String > iterator = Iterables . filter ( values , new Function < String , Boolean > ( ) { public Boolean apply ( String in ) { return in . equals ( in . toUpperCase ( ) ) ; } } ) . iterator ( ) ; assertTrue ( iterator . hasNext ( ) ) ; assertEquals ( iterator . next ( ) , " HI " ) ; assertEquals ( iterator . next ( ) , " YO " ) ; assertFalse ( iterator . hasNext ( ) ) ; }
 @ Bean public JaxRsApiApplication jaxRsApiApplication ( ) { return new JaxRsApiApplication ( ) ; }
 public JarEntry getJarEntry ( String name ) { JarEntry entry = super . getJarEntry ( name ) ; if ( ( entry != null ) && ( entry . getSize ( ) == 0 ) && ! entry . isDirectory ( ) ) { JarEntry dirEntry = super . getJarEntry ( name + ' / ' ) ; if ( dirEntry != null ) { entry = dirEntry ; } } return entry ; }
 public void setCity_name ( String city_name ) { this . city_name = city_name ; }
 public Boolean apply ( String in ) { return in . equals ( in . toUpperCase ( ) ) ; }
 public void setCity_code ( String city_code ) { this . city_code = city_code ; }
 @ After public void tearDown ( ) throws Exception { System . clearProperty ( PLUGIN_DESC_PROPERTY_SET_BY_PLUGIN_EXT_1 ) ; System . clearProperty ( PLUGIN_DESC_PROPERTY_SET_BY_PLUGIN_EXT_2 ) ; FileUtils . deleteQuietly ( PLUGIN_DIR ) ; FileUtils . deleteQuietly ( BUNDLE_DIR ) ; pluginManager . stopInfrastructure ( ) ; FileUtils . deleteQuietly ( PLUGIN_DIR ) ; FileUtils . deleteQuietly ( BUNDLE_DIR ) ; }
 public Object unmarshal ( HierarchicalStreamReader reader , UnmarshallingContext context ) { BrickCanvas canvas = BrickCanvas . getInstance ( ) ; while ( reader . hasMoreChildren ( ) ) { reader . moveDown ( ) ; if ( reader . getNodeName ( ) . equals ( " canvasBackgroundImage " ) ) { canvas . setBackgroundImage ( ( BackgroundImage ) context . convertAnother ( reader , BackgroundImage . class ) ) ; } if ( reader . getNodeName ( ) . equals ( " bricksOnCanvas " ) ) { while ( reader . hasMoreChildren ( ) ) { reader . moveDown ( ) ; if ( reader . getNodeName ( ) . equals ( Brick . class . getName ( ) ) ) { canvas . getLayer ( ) . addChild ( ( Brick ) context . convertAnother ( reader , Brick . class ) ) ; } reader . moveUp ( ) ; } } reader . moveUp ( ) ; } return canvas ; }
 @ Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { if ( file . getFileName ( ) . toString ( ) . startsWith ( " logging . " ) ) { loadConfig ( file , settingsBuilder ) ; } return FileVisitResult . CONTINUE ; }
 public OptionBuilder name ( String name ) { this . name = name ; return this ; }
 @ Override public void run ( HelloWorldConfiguration config , Environment environment ) { final JdbiFactory factory = new JdbiFactory ( ) ; final Jdbi jdbi = factory . build ( environment , config . getDatabaseConfiguration ( ) , " RDBMS " ) ; environment . jersey ( ) . register ( new WorldResource ( new WorldRepository ( jdbi ) ) ) ; environment . jersey ( ) . register ( new FortuneResource ( new FortuneRepository ( jdbi ) ) ) ; }
 @ Test @ Verifies ( value = " should ▁ return ▁ toString ▁ of ▁ hydrated ▁ value " , method = " toString ( ) " ) public void toString_shouldReturnToStringOfHydratedValue ( ) throws Exception { PersonAttributeType type = Context . getPersonService ( ) . getPersonAttributeType ( 8 ) ; PersonAttribute attr = new PersonAttribute ( type , "6" ) ; Assert . assertEquals ( " MARRIED " , attr . toString ( ) ) ; }
 @ Test @ Verifies ( value = " should ▁ still ▁ load ▁ class ▁ in ▁ format ▁ property ▁ if ▁ not ▁ Attributable " , method = " getHydratedObject ( ) " ) public void getHydratedObject_shouldStillLoadClassInFormatPropertyIfNotAttributable ( ) throws Exception { PersonAttributeType type = new PersonAttributeType ( ) ; type . setFormat ( " java . lang . String " ) ; PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setAttributeType ( type ) ; pa . setValue ( " lalapalooza " ) ; String value = ( String ) pa . getHydratedObject ( ) ; Assert . assertEquals ( " lalapalooza " , value ) ; }
 @ SuppressWarnings ( " synthetic - access " ) public void execute ( CmsHistoryResourceBean historyRes ) { m_handler . showPreview ( historyRes ) ; }
 @ Bean public PeopleRestService peopleRestService ( ) { return new PeopleRestService ( ) ; }
 public OptionBuilder shortName ( char n ) { shortName = n ; return this ; }
 @ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ other ▁ attribute ▁ is ▁ voided " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfOtherAttributeIsVoided ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; PersonAttribute other = new PersonAttribute ( ) ; other . setVoided ( true ) ; Assert . assertTrue ( pa . compareTo ( other ) < 0 ) ; }
 public OptionBuilder type ( Class < ? > type ) { this . type = type ; return this ; }
 @ Test public void testSetActiveCertificate ( ) { Map < String , List < SjukfallIntyg > > map = creator . createMap ( intygDataList , parameters ) ; Map < String , List < SjukfallIntyg > > activeMap = creator . setActive ( map ) ; assertTrue ( activeMap . entrySet ( ) . stream ( ) . allMatch ( e -> e . getValue ( ) . stream ( ) . filter ( o -> o . isAktivtIntyg ( ) ) . count ( ) < 2 ) ) ; }
 private void addPreviewColumn ( ) { CmsButtonCell < CmsHistoryResourceBean > previewCell = new CmsButtonCell < CmsHistoryResourceBean > ( CmsHistoryMessages . titlePreview ( ) , I_CmsImageBundle . INSTANCE . style ( ) . tablePreviewIcon ( ) , new ActionCell . Delegate < CmsHistoryResourceBean > ( ) { @ SuppressWarnings ( " synthetic - access " ) public void execute ( CmsHistoryResourceBean historyRes ) { m_handler . showPreview ( historyRes ) ; } } , new Predicate < CmsHistoryResourceBean > ( ) { public boolean apply ( CmsHistoryResourceBean bean ) { return true ; } } ) ; addColumn ( CmsHistoryMessages . columnPreview ( ) , 30 , new IdentityColumn < CmsHistoryResourceBean > ( previewCell ) ) ; }
 @ Template ( " < span ▁ class = \" { 1 } \" ▁ title = \" { 0 } \" > < / span > " ) SafeHtml button ( String title , String cssClass ) ;
 public OptionBuilder hasValue ( boolean hasValue ) { this . hasValue = hasValue ; return this ; }
 public String getIntervalString ( ) throws IOException { long time = getIntervalMillis ( ) ; return formatTime ( time ) ; }
 private void addModificationDateColumn ( ) { addColumn ( CmsHistoryMessages . columnModificationDate ( ) , 190 , new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { return historyRes . getModificationDate ( ) . getDateText ( ) ; } } ) ; }
 @ Test public void testCreatingMap ( ) { Map < String , List < SjukfallIntyg > > map = creator . createMap ( intygDataList , parameters ) ; assertTrue ( " Expected ▁ 7 ▁ but ▁ was ▁ " + map . size ( ) , map . size ( ) == 7 ) ; }
 @ Test public void testSortedMap ( ) { Map < String , List < SjukfallIntyg > > map = creator . createMap ( intygDataList , parameters ) ; Map < String , List < SjukfallIntyg > > sortedMap = creator . sortValues ( map ) ; for ( Map . Entry < String , List < SjukfallIntyg > > entry : sortedMap . entrySet ( ) ) { if ( entry . getValue ( ) . size ( ) > 1 ) { SjukfallIntyg [ ] arr = entry . getValue ( ) . toArray ( new SjukfallIntyg [ entry . getValue ( ) . size ( ) ] ) ; for ( int i = 0 ; i < arr . length - 1 ; i ++ ) { assertTrue ( arr [ i ] . getSlutDatum ( ) . isBefore ( arr [ i + 1 ] . getSlutDatum ( ) ) ) ; } } } }
 public Integer apply ( Integer in ) { return in * in ; }
 public String formatTime ( long millis ) { return formatter . format ( millis ) ; }
 private void addPathColumn ( ) { Column < CmsHistoryResourceBean , ? > col = new TextColumn < CmsHistoryResourceBean > ( ) { @ Override public String getValue ( CmsHistoryResourceBean historyRes ) { String path = historyRes . getRootPath ( ) ; String siteRoot = CmsCoreProvider . get ( ) . getSiteRoot ( ) ; if ( path . startsWith ( siteRoot ) ) { path = path . substring ( siteRoot . length ( ) ) ; if ( ! path . startsWith ( " / " ) ) { path = " / " + path ; } } return path ; } } ; addColumn ( col , CmsHistoryMessages . columnPath ( ) ) ; setColumnWidth ( col , 100 , Unit . PCT ) ; }
 @ Test public void testFall5 ( ) { String key = "19800124-9286" ; Map < String , List < SjukfallIntyg > > map = creator . create ( intygDataList , parameters ) ; List < SjukfallIntyg > list = map . get ( key ) ; assertTrue ( " Expected ▁ 2 ▁ but ▁ was ▁ " + list . size ( ) , list . size ( ) == 2 ) ; assertStartDate ( list . get ( 0 ) , "2016-02-12" ) ; assertEndDate ( list . get ( 1 ) , "2016-02-25" ) ; assertTrue ( list . get ( 0 ) . isAktivtIntyg ( ) ) ; assertFalse ( list . get ( 1 ) . isAktivtIntyg ( ) ) ; }
 @ Test public void shouldProvideDescriptorToMultipleExtensionsImplementingThePluginDescriptorAwareInterface ( ) throws Exception { GoPluginDescriptor plugin = pluginManager . getPluginDescriptorFor ( PLUGIN_ID ) ; assertThat ( plugin . id ( ) , is ( PLUGIN_ID ) ) ; assertThat ( plugin . bundleSymbolicName ( ) , is ( PLUGIN_ID ) ) ; assertThat ( plugin . bundleClassPath ( ) , is ( " lib / go - plugin - activator . jar , . " ) ) ; assertThat ( plugin . bundleActivator ( ) , is ( DefaultGoPluginActivator . class . getCanonicalName ( ) ) ) ; assertThat ( plugin . isInvalid ( ) , is ( false ) ) ; assertThat ( System . getProperty ( PLUGIN_DESC_PROPERTY_SET_BY_PLUGIN_EXT_1 ) , is ( plugin . toString ( ) ) ) ; assertThat ( System . getProperty ( PLUGIN_DESC_PROPERTY_SET_BY_PLUGIN_EXT_2 ) , is ( plugin . toString ( ) ) ) ; }
 private void addVersionColumn ( ) { AbstractCell < CmsHistoryResourceBean > cell = new CmsVersionCell ( ) ; addColumn ( CmsHistoryMessages . columnVersion ( ) , 40 , new IdentityColumn < CmsHistoryResourceBean > ( cell ) ) ; }
 @ Test @ Verifies ( value = " should ▁ return ▁ negative ▁ if ▁ this ▁ attribute ▁ has ▁ lower ▁ attribute ▁ type ▁ than ▁ argument " , method = " compareTo ( PersonAttribute ) " ) public void compareTo_shouldReturnNegativeIfThisAttributeHasLowerAttributeTypeThanArgument ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( ) ; pa . setAttributeType ( new PersonAttributeType ( 1 ) ) ; PersonAttribute other = new PersonAttribute ( ) ; other . setAttributeType ( new PersonAttributeType ( 2 ) ) ; Assert . assertTrue ( pa . compareTo ( other ) < 0 ) ; }
 @ Bean ( destroyMethod = " shutdown " ) public SpringBus cxf ( ) { return new SpringBus ( ) ; }
 public ResultScanner adapt ( final com . google . cloud . bigtable . grpc . scanner . ResultScanner < Row > bigtableResultScanner ) { return new AbstractClientScanner ( ) { @ Override public Result next ( ) throws IOException { Row row = bigtableResultScanner . next ( ) ; if ( row == null ) { return null ; } return rowAdapter . adaptResponse ( row ) ; } @ Override public void close ( ) { try { bigtableResultScanner . close ( ) ; } catch ( IOException ioe ) { throw Throwables . propagate ( ioe ) ; } } } ; }
 @ Bean public Server jaxRsServer ( ) { JAXRSServerFactoryBean factory = RuntimeDelegate . getInstance ( ) . createEndpoint ( jaxRsApiApplication ( ) , JAXRSServerFactoryBean . class ) ; factory . setServiceBeans ( Arrays . < Object > asList ( peopleRestService ( ) ) ) ; factory . setAddress ( " / " + factory . getAddress ( ) ) ; factory . setProviders ( Arrays . < Object > asList ( jsonProvider ( ) ) ) ; return factory . create ( ) ; }
 @ Override public List < SDVariable > doDiff ( List < SDVariable > gradients ) { return Arrays . asList ( f ( ) . segmentMinBp ( arg ( 0 ) , arg ( 1 ) , gradients . get ( 0 ) ) ) ; }
 @ Test @ Verifies ( value = " should ▁ load ▁ user ▁ class ▁ in ▁ format ▁ property " , method = " getHydratedObject ( ) " ) public void getHydratedObject_shouldLoadUserClassInFormatProperty ( ) throws Exception { PersonAttributeType type = new PersonAttributeType ( ) ; type . setFormat ( " org . openmrs . User " ) ; PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setAttributeType ( type ) ; pa . setValue ( "1" ) ; Object value = pa . getHydratedObject ( ) ; Assert . assertTrue ( " should ▁ load ▁ user ▁ class ▁ in ▁ format ▁ property " , ( value instanceof User ) ) ; }
 @ Before public void setup ( ) { creator = new SjukfallIntygEnhetCreator ( ) ; parameters = new IntygParametrar ( 5 , LocalDate . parse ( "2016-02-16" ) ) ; }
 @ Override public int getCount ( ) { if ( searchResultUsernames != null ) { return searchResultUsernames . size ( ) ; } else if ( searchResultHashtags != null ) { return searchResultHashtags . size ( ) ; } else if ( searchResultCommands != null ) { return searchResultCommands . size ( ) ; } return 0 ; }
 @ Override public boolean areAllItemsEnabled ( ) { return true ; }
 @ Override public void clearRecentHashtags ( ) { super . clearRecentHashtags ( ) ; searchResultHashtags . clear ( ) ; notifyDataSetChanged ( ) ; if ( delegate != null ) { delegate . needChangePanelVisibility ( false ) ; } }
 public void stopTime ( ) throws IOException { finishTimeEpoch = System . currentTimeMillis ( ) ; }
 @ Template ( " < span ▁ title = \" { 1 } \" > { 0 } < / span > " ) SafeHtml textSpanWithTitle ( String text , String title ) ;
 @ Override public int getItemViewType ( int position ) { return 0 ; }
 @ Bean public PeopleService peopleService ( ) { return new PeopleService ( ) ; }
 @ Override public String opName ( ) { return " segment _ min " ; }
 public int getId ( ) { return id ; }
 @ Test public void testFall4 ( ) { String key = "19800113-9297" ; Map < String , List < SjukfallIntyg > > map = creator . create ( intygDataList , parameters ) ; List < SjukfallIntyg > list = map . get ( key ) ; assertTrue ( " Expected ▁ 3 ▁ but ▁ was ▁ " + list . size ( ) , list . size ( ) == 3 ) ; assertStartDate ( list . get ( 0 ) , "2016-02-01" ) ; assertEndDate ( list . get ( 2 ) , "2016-02-25" ) ; assertTrue ( list . get ( 1 ) . isAktivtIntyg ( ) ) ; }
 public int getProvince_id ( ) { return province_id ; }
 @ Test @ Verifies ( value = " should ▁ set ▁ voided ▁ bit ▁ to ▁ true " , method = " voidAttribute ( String ) " ) public void voidAttribute_shouldSetVoidedBitToTrue ( ) throws Exception { PersonAttribute pa = new PersonAttribute ( 2 ) ; pa . setVoided ( false ) ; pa . voidAttribute ( " Because " ) ; Assert . assertTrue ( pa . isVoided ( ) ) ; }
 public boolean isBotCommands ( ) { return searchResultCommands != null ; }
 public OptionInt create ( ) throws OptionParserException { if ( optionType == null ) { if ( ! hasValue ) optionType = OptionType . BOOLEAN ; else if ( isProperty ) optionType = OptionType . GROUP ; else if ( hasMultipleValues ) optionType = OptionType . LIST ; else optionType = OptionType . NORMAL ; } if ( name == null || ( name . length ( ) < 1 && optionType != OptionType . ARGUMENT ) ) { if ( fieldName == null || fieldName . length ( ) < 1 ) throw new OptionParserException ( " Name ▁ must ▁ be ▁ defined ▁ to ▁ create ▁ an ▁ Option " ) ; else name = fieldName ; } return new OptionInt ( shortName , name , description , argument , required , valueSeparator , defaultValues , type , fieldName , optionType , converter , completer ) ; }
 public void testTransform ( ) { List < Integer > values = Arrays . asList ( 1 , 2 , 3 , 4 ) ; List < Integer > squares = Arrays . asList ( 1 , 4 , 9 , 16 ) ; Function < Integer , Integer > squarer = new Function < Integer , Integer > ( ) { public Integer apply ( Integer in ) { return in * in ; } } ; for ( Pair < Integer , Integer > pair : Iterables . zip ( Iterables . transform ( values , squarer ) , squares ) ) { assertEquals ( pair . first , pair . second ) ; } }
